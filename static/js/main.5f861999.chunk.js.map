{"version":3,"sources":["components/Services/StreamStore.js","components/Services/Parser/Google.js","components/SearchControl/SearchControlList.js","components/SearchControl/SearchControl.js","components/Utils/Utilits.js","components/Services/Config.js","components/Services/Service.js","components/Services/Grammar.js","components/Services/Models/Token.js","components/Services/Parser/Lexer.js","components/Services/Parser/Parser.js","components/Services/PersonStore.js","components/ContactMap/Contactmap.js","components/App/App.js","index.js"],"names":["instance","StreamStore","this","_data","stream","push","Object","freeze","Google","word","replace","list","streamStore","get","result","patternWord","toLowerCase","length","map","token","isNaN","getValue","value","type","getType","match","uniq","a","sort","b","getId","filter","item","pos","ary","SearchControlList","props","clickListItem","event","searchedList","li","document","querySelectorAll","liSection","updateList","i","getAttribute","remove","state","keys","activelist","google","showList","search","setState","find","sectionList","getElementsByClassName","firstChild","removeChild","forEach","createElement","className","setAttribute","innerHTML","getFeature","properties","username","city","about","addEventListener","e","target","matches","appendChild","Component","SearchControl","pressKeyInput","isCloseButtonVisible","isWrapperList","keyCode","console","log","inputValue","updateInfo","newPersons","features","isSearchVisible","clickOpenSearchButton","bind","clickCloseButton","closeSearch","onClick","viewBox","x1","y1","x2","y2","cx","cy","r","fill","placeholder","onKeyDown","onChange","d","Utils","element","func","attachEvent","Config","host","dataType","Service","CONFIG","data","getCall","options","method","headers","fetch","response","json","Grammar","tokens","patterns","Token","id","position","start","line","column","end","feature","Lexer","grammar","createToken","checkTokens","str","key","undefined","array","findMatches","setType","setValue","setPositionStartLine","setPositionStartColumn","String","setPositionEndLine","setPositionEndColumn","setId","setFeature","pattern","Parser","sortedStream","mapped","el","index","PersonStore","persons","ContactMap","boundariesColor","color","center","latLngGeom","boundaries","geometry","group","mapRef","useRef","getData","then","personStore","set","getStream","prepare","error","examplePersons","useEffect","osm","L","TileLayer","boundaryCanvas","boundary","attribution","current","zoom","layers","minZoom","maxZoom","zoomSnap","activeIcon","icon","iconUrl","iconSize","iconAnchor","inactiveIcon","boundariesLayer","geoJSON","style","clusters","markerClusterGroup","spiderfyOnMaxZoom","showCoverageOnHover","zoomToBoundsOnClick","chunkedLoading","ActivePeoples","geoJson","pointToLayer","latlng","marker","removeLayer","bindPopup","name","Subscribe","openPopup","addLayer","flyTo","coordinates","markersGroup","featureGroup","fitBounds","getBounds","onLoading","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5f861999.chunk.js","sourcesContent":["/**\n *  this Store save token's stream for next using by search\n */\n\nclass StreamStore {\n  constructor() {\n    if (!StreamStore.instance) {\n      this._data = [];\n      StreamStore.instance = this;\n    }\n\n    return StreamStore.instance;\n  }\n\n  get() {\n    return this._data[0];\n  }\n\n  set(stream) {\n    this._data.push(stream)\n  }\n\n\n}\n\nconst instance = new StreamStore();\nObject.freeze(instance);\n\nexport default instance;","import streamStore from '../StreamStore'\n\nexport default class Google {\n    constructor() {                      \n    }\n\n\n /**\n     * \n     * @param {searched value from input search, typed in the browser} word \n     * @returns {array of tokens, which have token.value like @param:word}\n     */\n    \n    find(word) {\n        \n        //replace html entities from  the string\n        word = word.replace(/([&<>\\\"'@#*\\(\\)])/g,\"\")       \n        \n        var list = streamStore.get();\n        \n        var result = []     \n        var patternWord = word.toLowerCase();\n        \n\n        if (word.length >= 1) {\n            list.map(function (token) {\n                //number returns already undefined\n                // it will be checked as string or number\n                if (isNaN(token.getValue())) {\n\n                    var value = token.getValue();\n                    var type = token.getType();\n\n                    //if (value.toLowerCase() == patternWord || type == patternWord) {\n                    if ((value.toLowerCase()).match(patternWord)  || type==patternWord ) {\n                        result.push(token);\n                    }\n                } else {\n                    //if (token.getValue() == patternWord) {\n                    if ((token.getValue()).match(patternWord)) {\n                        result.push(token);\n                    }\n                }\n            })            \n            //remove double values and return \n            return this.uniq(result);\n        }\n        //if result []\n        return result;\n    }\n\n    /**\n     * @param {array with doubled tokens} a\n     * @returns {array without unidue values}  \n     */\n    uniq(a) {\n        return a.sort(function (a, b) {                                \n            if (a.getId() > b.getId()) {\n                return 1;\n            }\n            if (a.getId() < b.getId()) {\n                return -1;\n            }\n            return 0;                \n        }).filter(function(item, pos, ary) {\n            return !pos || item.getId() != ary[pos - 1].getId();\n        });\n    }\n\n}","import React, { Component }  from 'react';\nimport Google from '../Services/Parser/Google'\n\n\nexport default class SearchControlList extends Component {\n    \n    \n    constructor(props) {\n        super(props);     \n        this.state = {\n            keys: \"\",\n            activelist: \"closed\"\n        };\n        \n        this.google = new Google();        \n        \n        this.searchedList = []\n\n    }\n\n\n    componentDidUpdate(){\n        if(this.state.activelist != this.props.activelist){\n            this.showList();\n        }\n        \n        this.search(this.props.keys);\n        \n    }\n\n    showList(){\n        this.setState({\n            activelist: this.props.activelist\n          });          \n    }\n\n    clickListItem = ( props, token ) => ( event ) => {        \n        var searchedList = [];\n        const li = document.querySelectorAll('li[choosed]');\n        const liSection = document.querySelectorAll('li[key]');\n        if(li[0]){            \n            searchedList.push(token);\n            props.updateList(searchedList);\n            \n            for(var i=0; i < liSection.length; i++){\n                if(liSection[i].getAttribute('choosed')==null){\n                    liSection[i].remove();\n                }\n            }\n\n        }\n    }\n\n    search(word){        \n        this.searchedList = this.google.find(word)\n        \n        //console.log(this.searchedList)\n        \n        if(this.searchedList[0]){\n            \n            //send list to props of the parent component \n            this.props.updateList(this.searchedList);\n\n            const sectionList = document.getElementsByClassName('search-control-info-list');\n            \n            while (sectionList[0].firstChild) {\n                sectionList[0].removeChild(sectionList[0].firstChild);\n              }\n            \n              //console.log(searchedList)\n\n              this.searchedList.forEach(token =>{\n                var li = document.createElement('li');\n                li.className = 'search-control-info-list-item' \n                li.setAttribute('key', token.getId())     \n                li.innerHTML= `\n                    <span-left>\n                        <img src=\"./img/programmer.png\" alt=\"avatar\"/>\n                        <h3>${token.getFeature().properties.username}</h3>\n                        <h3>${token.getFeature().properties.city}</h3>                    \n                    </span-left>\n                    <span-right>\n                        <p>About: ${token.getFeature().properties.about}</p>                \n                    </span-right> `\n\n                li.addEventListener(\"click\", this.clickListItem(this.props, token));\n                li.addEventListener(\"click\", function(e){\n                    if (e.target && e.target.matches(\"li.search-control-info-list-item\")) {\n                        e.target.setAttribute(\"choosed\", \"true\"); // new attribute                        \n                      }\n                });\n\n                sectionList[0].appendChild(li);\n            })\n            \n        }\n    }\n\n\nrender() {\n\n    return (\n        <ul className=\"search-control-info-list\">                         \n        </ul>\n    );\n    }\n}\n","import React, {Component, useState} from 'react';\nimport SearchControlList from './SearchControlList'\nimport './search-control.css'\n\n\nexport default class SearchControl extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isSearchVisible: false,\n            isCloseButtonVisible: false,\n            isWrapperList: \"closed\",\n            inputValue: \"\"\n        };\n\n\n        //bind for callbacks\n        this.clickOpenSearchButton = this.clickOpenSearchButton.bind(this);\n        this.clickCloseButton = this.clickCloseButton.bind(this);\n        this.pressKeyInput = this.pressKeyInput.bind(this); \n        \n    }\n\n    clickOpenSearchButton() {\n        this.setState(state => ({\n            isSearchVisible: !state.isSearchVisible,\n            isWrapperList: \"closed\",\n            inputValue: \"\"        \n        }));\n\n        //send close to high component for update map view\n        this.props.closeSearch('closed');\n        //remove all children from search list\n        const sectionList = document.getElementsByClassName('search-control-info-list');            \n            while (sectionList[0].firstChild) {\n                sectionList[0].removeChild(sectionList[0].firstChild);\n              }\n    }\n\n\n    clickCloseButton() {\n        this.setState(state => ({\n            isCloseButtonVisible: !state.isCloseButtonVisible,\n            isSearchVisible: false,\n            isWrapperList: \"closed\",\n            inputValue: ''\n        }));\n\n        //send close to high component for update map view\n        this.props.closeSearch('closed');\n        \n        //remove all children from search list\n        const sectionList = document.getElementsByClassName('search-control-info-list');            \n            while (sectionList[0].firstChild) {\n                sectionList[0].removeChild(sectionList[0].firstChild);\n              }\n    }\n\n    \n    pressKeyInput = (props, document) =>(e) => {\n        \n        //visible close button \n        this.setState(state => ({\n            isCloseButtonVisible: true,\n            isWrapperList: \"opened\"\n        }));\n                \n        //var nodes = document.getElementsByClassName(\"search-control-info-list-item\");\n\n        if (e.keyCode == 40) { \n            //TODO \n            console.log('key DOWN')\n        } else if (e.keyCode == 38) { \n            //TODO \n            console.log('key UP')\n        } else if (e.keyCode == 13) {\n            //TODO \n            console.log('key ENTER')\n        } else if(e.keyCode == 8) {\n                    \n            console.log('key BACKSPACE')\n            \n            \n            if(this.state.inputValue.length == 0){                \n                //remove all markers\n                props.updateInfo([]);\n                //remove all DOM elements form list\n                const sectionList = document.getElementsByClassName('search-control-info-list');                            \n                while (sectionList[0].firstChild) {\n                    sectionList[0].removeChild(sectionList[0].firstChild);\n                }\n\n            }            \n            \n        }\n        \n        \n    }\n\n\n    //it's call from SearchControlList to this parent component\n    updateList = (list) => {\n        \n        const newPersons = { \"type\": \"FeatureCollection\", \"features\": [] }  \n        list.forEach(token =>{\n            newPersons.features.push(token.getFeature())\n        })\n        \n        this.props.updateInfo(newPersons);\n\n\n    }\n\n    render() {\n      return (\n      <div className=\"search-box\">\n        <article className=\"search-control-wrap\">  \n            <section className={this.state.isSearchVisible?\"search-control search-control-active\":\"search-control\"}>\n                <button className=\"search-control-icon-button\" \n                    onClick={this.clickOpenSearchButton}>                \n                    <svg viewBox=\"0 0 50 50\">\n                        <line x1=\"35\" y1=\"35\" x2=\"46\" y2=\"46\"/>\n                        <circle cx=\"23\" cy=\"23\" r=\"16\" fill=\"none\"></circle> \n                            Sorry, your browser does not support inline SVG.\n                    </svg>                    \n                </button>                \n                <input \n                    type=\"text\" \n                    className=\"search-input search-control-input\" \n                    placeholder=\"custom placeholder\" \n                    onKeyDown={this.pressKeyInput(this.props, document)}\n                    onChange={e => this.setState({ inputValue: e.target.value })} \n                    value={this.state.inputValue}/>                \n                <button className={ this.state.isCloseButtonVisible ? \"search-control-close-button search-control-close-button-active\": \"search-control-close-button\"} onClick={this.clickCloseButton}>\n                    <svg viewBox=\"0 0 50 50\">\n                        <path d=\"M5 5 L45 45 M45 5 L5 45\"/>\n                        Sorry, your browser does not support inline SVG.\n                    </svg>\n                </button>\n            </section>\n            <section className={this.state.isWrapperList==\"opened\"?\"search-control-info-wrapper\":\"search-control-info-wrapper search-control-info-wrapper-close\"} >\n                <section className=\"search-control-info\">            \n                    <SearchControlList \n\n                        activelist={this.state.isWrapperList} \n                        keys={this.state.inputValue}\n                        updateList = {this.updateList}\n                    />\n                </section>            \n            </section>    \n        </article>\n     </div>\n      );\n    }\n  }\n","'use strict'\n\nexport default class Utils {\n\n    constructor () {     \n        this.document = document\n    }\n\n    Subscribe(event, element, func) {\n        if (element.addEventListener) {\n            element.addEventListener(event, func, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(\"on\" + event, func);\n        } else {\n            element['on' + event] = func;\n        }\n      }\n    \n\n}\n\n\n","/**\n * @param host you can use 'http://192.168.0.1/data'\n * if you test code in you home environment, it's very possible, that you  have some problems with\n * CORS. In this case you need add to package.json \"proxy\":\"your-dev-server\"\n * and in the @param host your call without name of this host, for example /getData or /data\n */\n\nconst Config = {\n    host: '/getData',\n    dataType: 'json'\n}\n\nexport default Config;","'use strict'\n\nimport CONFIG from './Config'\n\n/**\n *\n * @async GET call to the server \n * @param {string: 'json' || 'text'} dataType  \n * @param {string: name of host} host \n * @return {data in format json or text} \n * @return {callback} - for 404 page with Usehistory from React\n */\n\nexport default class Service {\n  \n  constructor(){\n    this.dataType = CONFIG.dataType;\n    this.host = CONFIG.host != '' ? CONFIG.host : null;  \n    this.data = {}; \n  }\n\n  async getData(){\n     return this.getCall();\n  }\n\n  async getCall() {\n        const options = {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n        try {\n          const response = await fetch(this.host, options)\n          const json = await response.json()\n          return json\n\n        } catch (err) {            \n            console.log('Error getting documents', err)\n\n        }\n  }   \n      \n}\n","/**\n    Grammar is descriptions about tokens\n    @return patterns for search tokens and making tokens stream\n */\n\nconst Grammar = {    \n            tokens : {                \n                patterns: {\n                    \"javascript\": /[j|J](ava|)[s|S](cript|)/g,\n                    \"java\" : /[j|J](ava|AVA)(\\s)/g,\n                    \"c++\" : /[c|C](\\++|\\+|plus)/g,\n                    \"python\" : /[p|P](i|y|I|Y)(ton|thon|TON|THON)/g,\n                    \"php\" : /[p|P](h|H)(P|p)/g,\n                    \"swift\" : /[s|S](wift|WIFT)/g,\n                    \"android\" : /[a|A](ndroid|droid|NDROID|ndroid|nroid|NROID)/g,\n                    \"ios\" : /[i|I](OS|os|0s)/g,\n                    \"bash\" : /[b|B](ash|ASH)/g,\n                    \"text@en\" : /[a-zäöüA-ZÄÖÜ0-9_\\-\\+\\.\\:\\,\\!]+[\\w\\-\\+\\.\\:\\,\\!]/g,\n                    \"text@ru\" :/[аАбБвВгГдДеЕёЁжЖзЗиИйЙкКлЛмМнНоОпПрРсСтТуУфФхХцЦчЧшШщЩъЪыЫьЬэЭюЮяЯ]+/g               \n                }\n            }   \n        }\n\nexport default Grammar;","const Token = class Token {\n\n    constructor() {\n        this.token = {\n            type: \"\",\n            value: \"\",\n            id: \"\",\n            position: {\n                start: {\n                    line: \"\",\n                    column: \"\"\n                },\n                end: {\n                    line: \"\",\n                    column: \"\"\n                }\n            },\n            feature: {}\n        }\n    }\n\n    setType(type) {\n        this.token.type = type;\n    }\n\n    getType() {\n        return this.token.type;\n    }\n\n    setValue(value) {\n        this.token.value = value;\n    }\n\n    getValue() {\n        return this.token.value\n    }\n\n    setId(id) {\n        this.token.id = id;\n    }\n\n    getId() {\n        return this.token.id\n    }\n\n    setPositionStartLine(line) {\n        this.token.position.start.line = line;\n    }\n\n    getPositionStartLine() {\n        return this.token.position.start.line\n    }\n\n    setPositionStartColumn(column) {\n        this.token.position.start.column = column;\n    }\n\n    getPositionStartColumn() {\n        return this.token.position.start.column;\n    }\n\n    setPositionEndLine(line) {\n        this.token.position.end.line = line;\n    }\n\n    getPositionEndLine() {\n        return this.token.position.end.line\n    }\n\n    setPositionEndColumn(column) {\n        this.token.position.end.column = column;\n    }\n\n    getPositionEndColumn() {\n        return this.token.position.end.column;\n    }\n\n    setFeature(feature) {\n        this.token.feature = feature;\n    }\n\n    getFeature() {\n        return this.token.feature;\n    }\n\n}\n\nexport default Token;","import grammar from '../Grammar'\nimport Token from '../Models/Token'\n//import Service from '../Service'\n\n/**\n * Lexer's concept is:\n *   - token stream\n *   - token\n *   - lexical scoping\n *   - lexical context\n *   \n *   @param json file with information about developers\n *   @param Grammar.js with description of tokens      \n *   @return token stream\n *   \n *   @example:\n *       {\n *           type: 'text',\n *           value: 'this is the test',\n *           id: 12,\n *           position : {\n *              start: {\n *                  line: 0,\n *                  column: 1\n *              },\n *              end: {\n *                  line: 0,\n *                  column: 3\n *              }  \n *           },\n *           \"geometry\": {\n *              \"type\": \"Point\",\n *              \"coordinates\": [ \"7.705953\", \"52.358919\"]\n *            }   \n *        }\n *\n */\n\nconst Lexer =  class Lexer {\n\n    constructor(data){        \n        this.stream = [];\n        this.data = data;\n    }\n    \n    getStream(){\n        \n        var patterns = grammar.tokens.patterns;  \n                    \n            this.data.features.forEach(feature => {                                \n                \n                this.createToken(feature, 'name');\n                this.createToken(feature, 'city');\n                this.createToken(feature, 'state');\n            \n            /**\n             *  @TODO if we have other options\n                this.createToken(feature, 'company');\n                this.createToken(feature, 'age');        \n             */\n            \n                 //was description \n                this.checkTokens(feature.properties.about, feature);\n            \n            /**\n             * @TODO if we have other options and need to see by regex expression\n             * this.checkTokens(feature.properties.address, feature);        \n             */\n            \n        })  \n        //console.log(this.stream)\n        return this.stream\n    }\n\n    checkTokens(str, feature){\n\n        var patterns = grammar.tokens.patterns;\n        var line = 0;\n        var column = 0;\n\n        for(var key in patterns){      \n            if(str!=null && str!=undefined){\n                const array = this.findMatches(str, patterns[key]);           \n                if(array!=null){\n                    array.forEach(value => {\n                    \n                        var token = new Token();\n                        token.setType(key);\n                        token.setValue(value);\n                        token.setPositionStartLine(line);\n                        token.setPositionStartColumn(column);\n                        column = String(value).length;\n                        token.setPositionEndLine(line);\n                        token.setPositionEndColumn(column);\n                        token.setId(feature.id);\n                        token.setFeature(feature);\n                        this.stream.push(token);           \n                    }   )\n                }            \n            }            \n        }\n\n    }\n\n    createToken(feature, type){\n        if(feature.properties[type]!=null && feature.properties[type]!=undefined){\n            var line = 0;\n            var column = String(feature.properties[type]).length;\n            var token = new Token();\n\n            token.setType(type);\n            token.setValue(feature.properties[type]);\n            token.setPositionStartLine(line);\n            token.setPositionStartColumn(0);            \n            token.setPositionEndLine(line);\n            token.setPositionEndColumn(column);\n            token.setId(feature.id);\n            token.setFeature(feature);                     \n        \n            this.stream.push(token);           \n        }\n    }\n     \n    findMatches(str, pattern){ \n\n        //console.log('str= '+str)\n        //console.log('pattern: '+pattern)\n\n        return str.match(pattern)\n    }\n\n\n}\n\nexport default Lexer;","/**\n *  Syntax Tree is possible, but for first realisaton and quick search we need \n *  to use 'map' and function 'sort()' for abc-sorting \n *\n *  it will be in the future:\n *  Parses a stream of tokens into an Abstract Syntax Tree (AST)\n *  Concept: Absract Syntax Tree (AST), nodes , dynamic scoping, dynamic context\n *  Target: By nodes we can search more quickly and effecient. Nodes we can show as\n *          some filters in our html template\n *  \n *   {\n *      type: 'root',\n *      nodes: [\n *          {\n *          type: 'text',\n *          value: 'abc',\n *          position: {start: {column: 1 line: 1}, end: {column: 3, line: 1}}\n *          },\n *          {\n *          type: 'text',\n *          value: 'fde',\n *          position: {start: {column: 4 line: 1}, end: {column: 8, line: 1}}\n *          }, \n *          ...\n *      ]\n *   }\n * \n * \n */\n\nexport default class Parser {\n    constructor(stream) {\n        this.stream = stream; //new Lexer().getStream();\n        this.sortedStream = [];\n        \n        //prepare stream to quick search\n        //this.prepare();\n    }\n\n    /**\n     * @param {no}\n     * @returns sorted stream for next using by searching of some value\n     * this method isn't actuall if we havn't  hierarchial searching\n     * @TODO need make hierarchial searching by word \n     */\n\n    prepare(){\n        // temp array consists of objects with position and sorting's value\n        var list = this.stream\n        var mapped = list.map(function (el, i) {\n            return {\n                index: i,\n                token: el\n            };\n        });\n\n        //sorting array\n        mapped.sort(function (a, b) {\n            if (a.token.getValue() > b.token.getValue()) {\n                return 1;\n            }\n            if (a.token.getValue() < b.token.getValue()) {\n                return -1;\n            }\n            return 0;\n        });\n\n        //result container\n        var result = mapped.map(function (token) {\n            return list[token.index];\n        });\n        this.sortedStream = result;        \n        return result\n    }\n}","class PersonStore {\n    constructor(){\n     if(! PersonStore.instance){\n       this._data = [];\n       PersonStore.instance = this;\n     }\n  \n     return PersonStore.instance;\n    }\n\n    get(){\n        return this._data[0]; \n    }\n\n    set(persons){\n        this._data.push(persons)\n    }\n\n  \n  }\n  \n  const instance = new PersonStore();\n  Object.freeze(instance);\n  \n  export default instance;","import React, { useEffect, useRef, useState} from 'react';\nimport L from 'leaflet';\nimport 'leaflet.markercluster'\nimport SearchControl from '../SearchControl/SearchControl';\nimport 'leaflet-boundary-canvas';\nimport Utils from '../Utils/Utilits';\nimport boundaries from \"../../data/boundaries.json\";\nimport './ContactMap.css'\n\nimport Service from '../Services/Service'\nimport Lexer from '../Services/Parser/Lexer'\nimport Parser from '../Services/Parser/Parser'\nimport personStore from '../Services/PersonStore'\nimport streamStore from '../Services/StreamStore'\nimport examplePersons from '../../data/persons.json'\n\n\n\nexport default function ContactMap(props) {\n\n  const boundariesColor = { color: \"orange\", fill: false};\n  const center = [51.0, 10.917];\n  const zoom = 6;\n  const minZoom = 4;\n  const maxZoom = 9;\n  const zoomSnap = 0.25\n  const latLngGeom = boundaries.geometry; //Define real geometry here\n  const osmUrl = 'https://{s}.tile.openstreetmap.de/tiles/osmde/{z}/{x}/{y}.png';\n  const osmAttribution = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors';\n  var group = [];\n  const mapRef = useRef(null)\n\n\n  /**\n   * loading data from dev server\n   * with error we show clear map in the browser\n   */\n\n  async function onLoading(){\n\n    var action = await new Service().getData().then((persons)=>{      \n      if(persons != undefined){\n        personStore.set(persons)      \n        var stream = new Lexer(persons).getStream();     \n        streamStore.set(stream);\n        new Parser(stream).prepare();\n        updateInfo(persons);    \n      }else{\n\n        console.error('Error connection with dev server, we use example data')        \n        //uses example data for our map\n        personStore.set(examplePersons)      \n        var stream = new Lexer(examplePersons).getStream();     \n        streamStore.set(stream);\n        new Parser(stream).prepare(); \n        \n      }     \n    });      \n  }\n\n\n  useEffect(() => {\n\n    var osm = L.TileLayer.boundaryCanvas(osmUrl, {\n      boundary: latLngGeom,\n        attribution: osmAttribution\n    })\n    \n    mapRef.current = L.map('map', {\n        center: center,\n        zoom: zoom,\n        layers: osm,\n        minZoom: minZoom,\n        maxZoom: maxZoom,\n        zoomSnap: zoomSnap\n    })\n        \n  }, [center, zoom, minZoom, maxZoom, zoomSnap])\n\n  /**\n   *  Set markers and position \n   */\n  \n  //set new icon image for markers\n  const activeIcon = L.icon({\n    iconUrl: './img/marker-icon-blue.png',\n    iconSize: [25, 41],\n    iconAnchor: [12,41]\n  });\n\n  const inactiveIcon = L.icon({\n    iconUrl: './img/marker-icon-gray.png',\n    iconSize: [25, 41],\n    iconAnchor: [12,41]\n  });\n\n  const boundariesLayer = L.geoJSON(boundaries, {\n    style: function (feature) {\n      return boundariesColor;\n    }\n  });\n\n  var clusters = L.markerClusterGroup({\n    spiderfyOnMaxZoom: true,\n    showCoverageOnHover: true,\n    zoomToBoundsOnClick: true,\n    chunkedLoading: true\n  });    \n\n\n\n  /** null markers block begin\n   * it's very important for first initialzation of the map\n  */\n  var ActivePeoples = L.geoJson(examplePersons, {\n    pointToLayer: function (feature, latlng) {\n      \n      var marker = L.marker(latlng, { \n        icon: (feature.properties.username?activeIcon:inactiveIcon)\n      });\n\n      //for making right position to fit all markers to the map\n      group.push(marker);    \n    }\n\n  });\n  \n    clusters.addLayer(boundariesLayer);\n    clusters.addLayer(ActivePeoples);\n\n  useEffect(() => {    \n    mapRef.current.addLayer(clusters)           \n\n  }, [clusters])\n  /** null markers block end*/\n  \n\n\n\n/**\n * this is callback from SearchControlList component\n * @param list  returns the list of tokens to updating of our markers\n * @return new person.json object \n */\n\nfunction updateInfo(data){\n  \n  clusters.removeLayer(ActivePeoples);        \n    \n  ActivePeoples = L.geoJson(data, {\n    pointToLayer: function (feature, latlng) { \n\n      \n      var marker = L.marker(latlng, { \n          icon: (feature.properties.username?activeIcon:inactiveIcon)\n        });\n\n      marker.bindPopup(\n        '<div class=\"popups-widget-top\">'+\n          '<img src=\"./img/programmer.png\" alt=\"avatar\"/>'+\n            '<div class=\"popups-top-right-section\">'+            \n            '<p>' + (feature.properties.username?'<a href=\"https://t.me/'+feature.properties.username+'\">@'+feature.properties.username+'  </a>':'<i>hidden </i>')\n                +'('+feature.properties.name + ')'+\n            '</p>'+\n            '<p class=\"city-name\"> from <b>'+feature.properties.city+'</b></p>' +       \n            '</div>'+\n         '</div>'+\n         '<div class=\"popups-widget-bottom\">'+\n            '<b>About:</b> ' + feature.properties.about +\n         '</div>'+\n         (feature.properties.username\n            ?''\n              :'<div class=\"popups-widget-bottom-error\">'+\n                  '<i class=\"error-info\">He/She needs to indicate a username</i></br>'+\n                  '<i class=\"error-info\">for communication</i>'+\n                  '</div>'\n         )\n      );\n\n\n      //marker.openPopup() doesnt work in Safari\n      //this is some hook             \n      function func() {\n        marker.openPopup();\n      }        \n      \n      //for making right position to fit all markers to the map\n      group.push(marker);\n\n      var utils = new Utils();\n      utils.Subscribe('click', marker, func);        \n      return marker;\n\n    }\n\n  });\n\n  clusters.addLayer(ActivePeoples);\n\n\n  /**\n     * if we have 1 person to view \n     * we fly to this person and see the map with maxZoom\n     */\n\n     \n  if( data.features && data.features.length == 1){\n    //console.log(data.features)\n    //console.log(data.features[0].geometry.coordinates)\n    \n    mapRef.current.flyTo([\n      data.features[0].geometry.coordinates[1],\n      data.features[0].geometry.coordinates[0]], \n      maxZoom)\n  } else {\n\n    //we fly to all clusters and set zoom to fit\n    var markersGroup = new L.featureGroup(group);\n    mapRef.current.fitBounds(markersGroup.getBounds())\n  }\n}\n\n//props callback\n function closeSearch(event){\n   if(event == 'closed'){    \n      updateInfo(examplePersons);\n   }\n }\n\n onLoading();\n\nreturn <div>\n          <SearchControl updateInfo={updateInfo} closeSearch={closeSearch}/>\n          <div id='map'></div>\n        </div>\n\n}","import React, { Component } from 'react';\nimport \"./App.css\";\nimport ContactMap from '../ContactMap/Contactmap';\n\n \nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <ContactMap/>\n      </div>\n    );\n  }\n}\n \nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}